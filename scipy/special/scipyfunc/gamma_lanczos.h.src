/*
 *     (C) Copyright John Maddock 2006.
 *     Use, modification and distribution are subject to the
 *     Boost Software License, Version 1.0. (See accompanying file
 *     LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 *     ---
 *
 *     Boost Software License - Version 1.0 - August 17th, 2003
 * 
 *     Permission is hereby granted, free of charge, to any person or
 *     organization obtaining a copy of the software and accompanying
 *     documentation covered by this license (the "Software") to use, reproduce,
 *     display, distribute, execute, and transmit the Software, and to prepare
 *     derivative works of the Software, and to permit third-parties to whom the
 *     Software is furnished to do so, all subject to the following:
 *     
 *     The copyright notices in the Software and this entire statement,
 *     including the above license grant, this restriction and the following
 *     disclaimer, must be included in all copies of the Software, in whole or
 *     in part, and all derivative works of the Software, unless such copies or
 *     derivative works are solely in the form of machine-executable object code
 *     generated by a source language processor.
 *     
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 *     NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 *     DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *     SOFTWARE.
 *
 */

#ifndef GAMMA_LANCZOS_H
#define GAMMA_LANCZOS_H

/*
 * Individual lanczos approximations start here.
 *
 * Optimal values for G for each N are taken from
 * http: *web.mala.bc.ca/pughg/phdThesis/phdThesis.pdf,
 * as are the theoretical error bounds.
 *
 * Constants calculated using the method described by Godfrey
 * http: *my.fit.edu/~gabdo/gamma.txt and elaborated by Toth at
 * http: *www.rskey.org/gamma.htm using NTL::RR at 1000 bit precision.
 *
 * Lanczos Coefficients for N=6 G=5.581
 * Max experimental error (with arbitary precision arithmetic) 9.516e-12
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 */

/*
 * Produces slightly better than float precision when evaluated at
 * double precision:
 */

/**begin repeat
 * #real = float,double,npy_longdouble#
 * #c = f,,l#
 * #C = F,,L#
 */

static @real@ lanczos6_sum@c@(@real@ z)
{
    static const @real@ num[6] = {
        8706.349592549009182288174442774377925882@C@,
        8523.650341121874633477483696775067709735@C@,
        3338.029219476423550899999750161289306564@C@,
        653.6424994294008795995653541449610986791@C@,
        63.99951844938187085666201263218840287667@C@,
        2.506628274631006311133031631822390264407@C@
    };
    static const @real@ denom[6] = {
        0.0@C@,
        24.0@C@,
        50.0@C@,
        35.0@C@,
        10.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 6);
}

   
static @real@ lanczos6_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[6] = {
        32.81244541029783471623665933780748627823@C@,
        32.12388941444332003446077108933558534361@C@,
        12.58034729455216106950851080138931470954@C@,
        2.463444478353241423633780693218408889251@C@,
        0.2412010548258800231126240760264822486599@C@,
        0.009446967704539249494420221613134244048319@C@
    };
    static const @real@ denom[6] = {
        0.0@C@,
        24.0@C@,
        50.0@C@,
        35.0@C@,
        10.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 6);
}


static @real@ lanczos6_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[5] = {
        2.044879010930422922760429926121241330235@C@,
        -2.751366405578505366591317846728753993668@C@,
        1.02282965224225004296750609604264824677@C@,
        -0.09786124911582813985028889636665335893627@C@,
        0.0009829742267506615183144364420540766510112@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos6_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[5] = {
        5.748142489536043490764289256167080091892@C@,
        -7.734074268282457156081021756682138251825@C@,
        2.875167944990511006997713242805893543947@C@,
        -0.2750873773533504542306766137703788781776@C@,
        0.002763134585812698552178368447708846850353@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos6_g@c@()
{
    return 5.581000000000000405009359383257105946541@C@;
}

/*
 *
 * Lanczos Coefficients for N=11 G=10.900511
 * Max experimental error (with arbitary precision arithmetic) 2.16676e-19
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 */

/*
 *
 * Produces slightly better than double precision when evaluated at
 * extended-double precision:
 *
 */
static @real@ lanczos11_sum@c@(@real@ z)
{
    static const @real@ num[11] = {
        38474670393.31776828316099004518914832218@C@,
        36857665043.51950660081971227404959150474@C@,
        15889202453.72942008945006665994637853242@C@,
        4059208354.298834770194507810788393801607@C@,
        680547661.1834733286087695557084801366446@C@,
        78239755.00312005289816041245285376206263@C@,
        6246580.776401795264013335510453568106366@C@,
        341986.3488721347032223777872763188768288@C@,
        12287.19451182455120096222044424100527629@C@,
        261.6140441641668190791708576058805625502@C@,
        2.506628274631000502415573855452633787834@C@
    };
    static const @real@ denom[11] = {
        0.0@C@,
        362880.0@C@,
        1026576.0@C@,
        1172700.0@C@,
        723680.0@C@,
        269325.0@C@,
        63273.0@C@,
        9450.0@C@,
        870.0@C@,
        45.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 11);
}

   
static @real@ lanczos11_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[11] = {
        709811.662581657956893540610814842699825@C@,
        679979.847415722640161734319823103390728@C@,
        293136.785721159725251629480984140341656@C@,
        74887.5403291467179935942448101441897121@C@,
        12555.29058241386295096255111537516768137@C@,
        1443.42992444170669746078056942194198252@C@,
        115.2419459613734722083208906727972935065@C@,
        6.30923920573262762719523981992008976989@C@,
        0.2266840463022436475495508977579735223818@C@,
        0.004826466289237661857584712046231435101741@C@,
        0.4624429436045378766270459638520555557321e-4@C@
    };
    static const @real@ denom[11] = {
        0.0@C@,
        362880.0@C@,
        1026576.0@C@,
        1172700.0@C@,
        723680.0@C@,
        269325.0@C@,
        63273.0@C@,
        9450.0@C@,
        870.0@C@,
        45.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 11);
}


static @real@ lanczos11_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[10] = {
        4.005853070677940377969080796551266387954@C@,
        -13.17044315127646469834125159673527183164@C@,
        17.19146865350790353683895137079288129318@C@,
        -11.36446409067666626185701599196274701126@C@,
        4.024801119349323770107694133829772634737@C@,
        -0.7445703262078094128346501724255463005006@C@,
        0.06513861351917497265045550019547857713172@C@,
        -0.00217899958561830354633560009312512312758@C@,
        0.17655204574495137651670832229571934738e-4@C@,
        -0.1036282091079938047775645941885460820853e-7@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos11_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[10] = {
        19.05889633808148715159575716844556056056@C@,
        -62.66183664701721716960978577959655644762@C@,
        81.7929198065004751699057192860287512027@C@,
        -54.06941772964234828416072865069196553015@C@,
        19.14904664790693019642068229478769661515@C@,
        -3.542488556926667589704590409095331790317@C@,
        0.3099140334815639910894627700232804503017@C@,
        -0.01036716187296241640634252431913030440825@C@,
        0.8399926504443119927673843789048514017761e-4@C@,
        -0.493038376656195010308610694048822561263e-7@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos11_g@c@()
{
    return 10.90051099999999983936049829935654997826@C@;
}

/*
 *
 * Lanczos Coefficients for N=13 G=13.144565
 * Max experimental error (with arbitary precision arithmetic) 9.2213e-23
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */
/*
 *
 * Produces slightly better than extended-double precision when evaluated at
 * higher precision:
 *
 */
   
static @real@ lanczos13_sum@c@(@real@ z)
{
    static const @real@ num[13] = {
        44012138428004.60895436261759919070125699@C@,
        41590453358593.20051581730723108131357995@C@,
        18013842787117.99677796276038389462742949@C@,
        4728736263475.388896889723995205703970787@C@,
        837910083628.4046470415724300225777912264@C@,
        105583707273.4299344907359855510105321192@C@,
        9701363618.494999493386608345339104922694@C@,
        654914397.5482052641016767125048538245644@C@,
        32238322.94213356530668889463945849409184@C@,
        1128514.219497091438040721811544858643121@C@,
        26665.79378459858944762533958798805525125@C@,
        381.8801248632926870394389468349331394196@C@,
        2.506628274631000502415763426076722427007@C@
    };
    static const @real@ denom[13] = {
        0.0@C@,
        39916800.0@C@,
        120543840.0@C@,
        150917976.0@C@,
        105258076.0@C@,
        45995730.0@C@,
        13339535.0@C@,
        2637558.0@C@,
        357423.0@C@,
        32670.0@C@,
        1925.0@C@,
        66.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 13);
}

   
static @real@ lanczos13_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[13] = {
        86091529.53418537217994842267760536134841@C@,
        81354505.17858011242874285785316135398567@C@,
        35236626.38815461910817650960734605416521@C@,
        9249814.988024471294683815872977672237195@C@,
        1639024.216687146960253839656643518985826@C@,
        206530.8157641225032631778026076868855623@C@,
        18976.70193530288915698282139308582105936@C@,
        1281.068909912559479885759622791374106059@C@,
        63.06093343420234536146194868906771599354@C@,
        2.207470909792527638222674678171050209691@C@,
        0.05216058694613505427476207805814960742102@C@,
        0.0007469903808915448316510079585999893674101@C@,
        0.4903180573459871862552197089738373164184e-5@C@
    };
    static const @real@ denom[13] = {
        0.0@C@,
        39916800.0@C@,
        120543840.0@C@,
        150917976.0@C@,
        105258076.0@C@,
        45995730.0@C@,
        13339535.0@C@,
        2637558.0@C@,
        357423.0@C@,
        32670.0@C@,
        1925.0@C@,
        66.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 13);
}


static @real@ lanczos13_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[12] = {
        4.832115561461656947793029596285626840312@C@,
        -19.86441536140337740383120735104359034688@C@,
        33.9927422807443239927197864963170585331@C@,
        -31.41520692249765980987427413991250886138@C@,
        17.0270866009599345679868972409543597821@C@,
        -5.5077216950865501362506920516723682167@C@,
        1.037811741948214855286817963800439373362@C@,
        -0.106640468537356182313660880481398642811@C@,
        0.005276450526660653288757565778182586742831@C@,
        -0.0001000935625597121545867453746252064770029@C@,
        0.462590910138598083940803704521211569234e-6@C@,
        -0.1735307814426389420248044907765671743012e-9@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos13_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[12] = {
        26.96979819614830698367887026728396466395@C@,
        -110.8705424709385114023884328797900204863@C@,
        189.7258846119231466417015694690434770085@C@,
        -175.3397202971107486383321670769397356553@C@,
        95.03437648691551457087250340903980824948@C@,
        -30.7406022781665264273675797983497141978@C@,
        5.792405601630517993355102578874590410552@C@,
        -0.5951993240669148697377539518639997795831@C@,
        0.02944979359164017509944724739946255067671@C@,
        -0.0005586586555377030921194246330399163602684@C@,
        0.2581888478270733025288922038673392636029e-5@C@,
        -0.9685385411006641478305219367315965391289e-9@C@,
    };
    @real@ result = 0;
    @real@ z = z = 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos13_g@c@()
{
    return 13.1445650000000000545696821063756942749@C@;
}

/*
 *
 * Lanczos Coefficients for N=22 G=22.61891
 * Max experimental error (with arbitary precision arithmetic) 2.9524e-38
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */

/*
 *
 * Produces slightly better than 128-bit long-double precision when 
 * evaluated at higher precision:
 *
 */
   
static @real@ lanczos22_sum@c@(@real@ z)
{
    static const @real@ num[22] = {
        46198410803245094237463011094.12173081986@C@,
        43735859291852324413622037436.321513777@C@,
        19716607234435171720534556386.97481377748@C@,
        5629401471315018442177955161.245623932129@C@,
        1142024910634417138386281569.245580222392@C@,
        175048529315951173131586747.695329230778@C@,
        21044290245653709191654675.41581372963167@C@,
        2033001410561031998451380.335553678782601@C@,
        160394318862140953773928.8736211601848891@C@,
        10444944438396359705707.48957290388740896@C@,
        565075825801617290121.1466393747967538948@C@,
        25475874292116227538.99448534450411942597@C@,
        957135055846602154.6720835535232270205725@C@,
        29874506304047462.23662392445173880821515@C@,
        769651310384737.2749087590725764959689181@C@,
        16193289100889.15989633624378404096011797@C@,
        273781151680.6807433264462376754578933261@C@,
        3630485900.32917021712188739762161583295@C@,
        36374352.05577334277856865691538582936484@C@,
        258945.7742115532455441786924971194951043@C@,
        1167.501919472435718934219997431551246996@C@,
        2.50662827463100050241576528481104525333@C@
    };
    static const @real@ denom[22] = {
        0.0@C@,
        2432902008176640000.0@C@,
        8752948036761600000.0@C@,
        13803759753640704000.0@C@,
        12870931245150988800.0@C@,
        8037811822645051776.0@C@,
        3599979517947607200.0@C@,
        1206647803780373360.0@C@,
        311333643161390640.0@C@,
        63030812099294896.0@C@,
        10142299865511450.0@C@,
        1307535010540395.0@C@,
        135585182899530.0@C@,
        11310276995381.0@C@,
        756111184500.0@C@,
        40171771630.0@C@,
        1672280820.0@C@,
        53327946.0@C@,
        1256850.0@C@,
        20615.0@C@,
        210.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 22);
}

   
static @real@ lanczos22_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[22] = {
        6939996264376682180.277485395074954356211@C@,
        6570067992110214451.87201438870245659384@C@,
        2961859037444440551.986724631496417064121@C@,
        845657339772791245.3541226499766163431651@C@,
        171556737035449095.2475716923888737881837@C@,
        26296059072490867.7822441885603400926007@C@,
        3161305619652108.433798300149816829198706@C@,
        305400596026022.4774396904484542582526472@C@,
        24094681058862.55120507202622377623528108@C@,
        1569055604375.919477574824168939428328839@C@,
        84886558909.02047889339710230696942513159@C@,
        3827024985.166751989686050643579753162298@C@,
        143782298.9273215199098728674282885500522@C@,
        4487794.24541641841336786238909171265944@C@,
        115618.2025760830513505888216285273541959@C@,
        2432.580773108508276957461757328744780439@C@,
        41.12782532742893597168530008461874360191@C@,
        0.5453771709477689805460179187388702295792@C@,
        0.005464211062612080347167337964166505282809@C@,
        0.388992321263586767037090706042788910953e-4@C@,
        0.1753839324538447655939518484052327068859e-6@C@,
        0.3765495513732730583386223384116545391759e-9@C@
    };
    static const @real@ denom[22] = {
        0.0@C@,
        2432902008176640000.0@C@,
        8752948036761600000.0@C@,
        13803759753640704000.0@C@,
        12870931245150988800.0@C@,
        8037811822645051776.0@C@,
        3599979517947607200.0@C@,
        1206647803780373360.0@C@,
        311333643161390640.0@C@,
        63030812099294896.0@C@,
        10142299865511450.0@C@,
        1307535010540395.0@C@,
        135585182899530.0@C@,
        11310276995381.0@C@,
        756111184500.0@C@,
        40171771630.0@C@,
        1672280820.0@C@,
        53327946.0@C@,
        1256850.0@C@,
        20615.0@C@,
        210.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 22);
}


static @real@ lanczos22_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[21] = {
        8.318998691953337183034781139546384476554@C@,
        -63.15415991415959158214140353299240638675@C@,
        217.3108224383632868591462242669081540163@C@,
        -448.5134281386108366899784093610397354889@C@,
        619.2903759363285456927248474593012711346@C@,
        -604.1630177420625418522025080080444177046@C@,
        428.8166750424646119935047118287362193314@C@,
        -224.6988753721310913866347429589434550302@C@,
        87.32181627555510833499451817622786940961@C@,
        -25.07866854821128965662498003029199058098@C@,
        5.264398125689025351448861011657789005392@C@,
        -0.792518936256495243383586076579921559914@C@,
        0.08317448364744713773350272460937904691566@C@,
        -0.005845345166274053157781068150827567998882@C@,
        0.0002599412126352082483326238522490030412391@C@,
        -0.6748102079670763884917431338234783496303e-5@C@,
        0.908824383434109002762325095643458603605e-7@C@,
        -0.5299325929309389890892469299969669579725e-9@C@,
        0.994306085859549890267983602248532869362e-12@C@,
        -0.3499893692975262747371544905820891835298e-15@C@,
        0.7260746353663365145454867069182884694961e-20@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos22_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[21] = {
        75.39272007105208086018421070699575462226@C@,
        -572.3481967049935412452681346759966390319@C@,
        1969.426202741555335078065370698955484358@C@,
        -4064.74968778032030891520063865996757519@C@,
        5612.452614138013929794736248384309574814@C@,
        -5475.357667500026172903620177988213902339@C@,
        3886.243614216111328329547926490398103492@C@,
        -2036.382026072125407192448069428134470564@C@,
        791.3727954936062108045551843636692287652@C@,
        -227.2808432388436552794021219198885223122@C@,
        47.70974355562144229897637024320739257284@C@,
        -7.182373807798293545187073539819697141572@C@,
        0.7537866989631514559601547530490976100468@C@,
        -0.05297470142240154822658739758236594717787@C@,
        0.00235577330936380542539812701472320434133@C@,
        -0.6115613067659273118098229498679502138802e-4@C@,
        0.8236417010170941915758315020695551724181e-6@C@,
        -0.4802628430993048190311242611330072198089e-8@C@,
        0.9011113376981524418952720279739624707342e-11@C@,
        -0.3171854152689711198382455703658589996796e-14@C@,
        0.6580207998808093935798753964580596673177e-19@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos22_g@c@()
{
    return 22.61890999999999962710717227309942245483@C@;
}

/*
 *
 * Lanczos Coefficients for N=6 G=1.428456135094165802001953125
 * Max experimental error (with arbitary precision arithmetic) 8.111667e-8
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */

/*
 *
 * Use for float precision, when evaluated as a float:
 *
 */
   
static @real@ lanczos6m24_sum@c@(@real@ z)
{
    static const @real@ num[6] = {
        58.52061591769095910314047740215847630266@C@,
        182.5248962595894264831189414768236280862@C@,
        211.0971093028510041839168287718170827259@C@,
        112.2526547883668146736465390902227161763@C@,
        27.5192015197455403062503721613097825345@C@,
        2.50662858515256974113978724717473206342@C@
    };
    static const @real@ denom[6] = {
        0.0@C@,
        24.0@C@,
        50.0@C@,
        35.0@C@,
        10.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 6);
}

   
static @real@ lanczos6m24_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[6] = {
        14.0261432874996476619570577285003839357@C@,
        43.74732405540314316089531289293124360129@C@,
        50.59547402616588964511581430025589038612@C@,
        26.90456680562548195593733429204228910299@C@,
        6.595765571169314946316366571954421695196@C@,
        0.6007854010515290065101128585795542383721@C@
    };
    static const @real@ denom[6] = {
        0.0@C@,
        24.0@C@,
        50.0@C@,
        35.0@C@,
        10.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 6);
}


static @real@ lanczos6m24_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[5] = {
        0.4922488055204602807654354732674868442106@C@,
        0.004954497451132152436631238060933905650346@C@,
        -0.003374784572167105840686977985330859371848@C@,
        0.001924276018962061937026396537786414831385@C@,
        -0.00056533046336427583708166383712907694434@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos6m24_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[5] = {
        0.6534966888520080645505805298901130485464@C@,
        0.006577461728560758362509168026049182707101@C@,
        -0.004480276069269967207178373559014835978161@C@,
        0.00255461870648818292376982818026706528842@C@,
        -0.000750517993690428370380996157470900204524@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos6m24_g@c@()
{
    return 1.428456135094165802001953125@C@;
}

/*
 *
 * Lanczos Coefficients for N=13 G=6.024680040776729583740234375
 * Max experimental error (with arbitary precision arithmetic) 1.196214e-17
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */
/*
 *
 * Use for double precision, when evaluated as a double:
 *
 */
   
static @real@ lanczos13m53_sum@c@(@real@ z)
{
    static const @real@ num[13] = {
        23531376880.41075968857200767445163675473@C@,
        42919803642.64909876895789904700198885093@C@,
        35711959237.35566804944018545154716670596@C@,
        17921034426.03720969991975575445893111267@C@,
        6039542586.35202800506429164430729792107@C@,
        1439720407.311721673663223072794912393972@C@,
        248874557.8620541565114603864132294232163@C@,
        31426415.58540019438061423162831820536287@C@,
        2876370.628935372441225409051620849613599@C@,
        186056.2653952234950402949897160456992822@C@,
        8071.672002365816210638002902272250613822@C@,
        210.8242777515793458725097339207133627117@C@,
        2.506628274631000270164908177133837338626@C@
    };
    static const @real@ denom[13] = {
        0.0@C@,
        39916800.0@C@,
        120543840.0@C@,
        150917976.0@C@,
        105258076.0@C@,
        45995730.0@C@,
        13339535.0@C@,
        2637558.0@C@,
        357423.0@C@,
        32670.0@C@,
        1925.0@C@,
        66.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 13);
}

   
static @real@ lanczos13m53_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[13] = {
        56906521.91347156388090791033559122686859@C@,
        103794043.1163445451906271053616070238554@C@,
        86363131.28813859145546927288977868422342@C@,
        43338889.32467613834773723740590533316085@C@,
        14605578.08768506808414169982791359218571@C@,
        3481712.15498064590882071018964774556468@C@,
        601859.6171681098786670226533699352302507@C@,
        75999.29304014542649875303443598909137092@C@,
        6955.999602515376140356310115515198987526@C@,
        449.9445569063168119446858607650988409623@C@,
        19.51992788247617482847860966235652136208@C@,
        0.5098416655656676188125178644804694509993@C@,
        0.006061842346248906525783753964555936883222@C@
    };
    static const @real@ denom[13] = {
        0.0@C@,
        39916800.0@C@,
        120543840.0@C@,
        150917976.0@C@,
        105258076.0@C@,
        45995730.0@C@,
        13339535.0@C@,
        2637558.0@C@,
        357423.0@C@,
        32670.0@C@,
        1925.0@C@,
        66.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 13);
}

static @real@ lanczos13m53_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[12] = {
        2.208709979316623790862569924861841433016@C@,
        -3.327150580651624233553677113928873034916@C@,
        1.483082862367253753040442933770164111678@C@,
        -0.1993758927614728757314233026257810172008@C@,
        0.004785200610085071473880915854204301886437@C@,
        -0.1515973019871092388943437623825208095123e-5@C@,
        -0.2752907702903126466004207345038327818713e-7@C@,
        0.3075580174791348492737947340039992829546e-7@C@,
        -0.1933117898880828348692541394841204288047e-7@C@,
        0.8690926181038057039526127422002498960172e-8@C@,
        -0.2499505151487868335680273909354071938387e-8@C@,
        0.3394643171893132535170101292240837927725e-9@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos13m53_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[12] = {
        6.565936202082889535528455955485877361223@C@,
        -9.8907772644920670589288081640128194231@C@,
        4.408830289125943377923077727900630927902@C@,
        -0.5926941084905061794445733628891024027949@C@,
        0.01422519127192419234315002746252160965831@C@,
        -0.4506604409707170077136555010018549819192e-5@C@,
        -0.8183698410724358930823737982119474130069e-7@C@,
        0.9142922068165324132060550591210267992072e-7@C@,
        -0.5746670642147041587497159649318454348117e-7@C@,
        0.2583592566524439230844378948704262291927e-7@C@,
        -0.7430396708998719707642735577238449585822e-8@C@,
        0.1009141566987569892221439918230042368112e-8@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos13m53_g@c@()
{
    return 6.024680040776729583740234375@C@;
}

/*
 *
 * Lanczos Coefficients for N=17 G=12.2252227365970611572265625
 * Max experimental error (with arbitary precision arithmetic) 2.7699e-26
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */

/*
 * Use for extended-double precision, when evaluated as an extended-double:
 */
   
static @real@ lanczos17m64_sum@c@(@real@ z)
{
    static const @real@ num[17] = {
        553681095419291969.2230556393350368550504@C@,
        731918863887667017.2511276782146694632234@C@,
        453393234285807339.4627124634539085143364@C@,
        174701893724452790.3546219631779712198035@C@,
        46866125995234723.82897281620357050883077@C@,
        9281280675933215.169109622777099699054272@C@,
        1403600894156674.551057997617468721789536@C@,
        165345984157572.7305349809894046783973837@C@,
        15333629842677.31531822808737907246817024@C@,
        1123152927963.956626161137169462874517318@C@,
        64763127437.92329018717775593533620578237@C@,
        2908830362.657527782848828237106640944457@C@,
        99764700.56999856729959383751710026787811@C@,
        2525791.604886139959837791244686290089331@C@,
        44516.94034970167828580039370201346554872@C@,
        488.0063567520005730476791712814838113252@C@,
        2.50662827463100050241576877135758834683@C@
    };
    static const @real@ denom[17] = {
        0.0@C@,
        1307674368000.0@C@,
        4339163001600.0@C@,
        6165817614720.0@C@,
        5056995703824.0@C@,
        2706813345600.0@C@,
        1009672107080.0@C@,
        272803210680.0@C@,
        54631129553.0@C@,
        8207628000.0@C@,
        928095740.0@C@,
        78558480.0@C@,
        4899622.0@C@,
        218400.0@C@,
        6580.0@C@,
        120.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 17);
}

   
static @real@ lanczos17m64_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[17] = {
        2715894658327.717377557655133124376674911@C@,
        3590179526097.912105038525528721129550434@C@,
        2223966599737.814969312127353235818710172@C@,
        856940834518.9562481809925866825485883417@C@,
        229885871668.749072933597446453399395469@C@,
        45526171687.54610815813502794395753410032@C@,
        6884887713.165178784550917647709216424823@C@,
        811048596.1407531864760282453852372777439@C@,
        75213915.96540822314499613623119501704812@C@,
        5509245.417224265151697527957954952830126@C@,
        317673.5368435419126714931842182369574221@C@,
        14268.27989845035520147014373320337523596@C@,
        489.3618720403263670213909083601787814792@C@,
        12.38941330038454449295883217865458609584@C@,
        0.2183627389504614963941574507281683147897@C@,
        0.002393749522058449186690627996063983095463@C@,
        0.1229541408909435212800785616808830746135e-4@C@
    };
    static const @real@ denom[17] = {
        0.0@C@,
        1307674368000.0@C@,
        4339163001600.0@C@,
        6165817614720.0@C@,
        5056995703824.0@C@,
        2706813345600.0@C@,
        1009672107080.0@C@,
        272803210680.0@C@,
        54631129553.0@C@,
        8207628000.0@C@,
        928095740.0@C@,
        78558480.0@C@,
        4899622.0@C@,
        218400.0@C@,
        6580.0@C@,
        120.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 17);
}


static @real@ lanczos17m64_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[16] = {
        4.493645054286536365763334986866616581265@C@,
        -16.95716370392468543800733966378143997694@C@,
        26.19196892983737527836811770970479846644@C@,
        -21.3659076437988814488356323758179283908@C@,
        9.913992596774556590710751047594507535764@C@,
        -2.62888300018780199210536267080940382158@C@,
        0.3807056693542503606384861890663080735588@C@,
        -0.02714647489697685807340312061034730486958@C@,
        0.0007815484715461206757220527133967191796747@C@,
        -0.6108630817371501052576880554048972272435e-5@C@,
        0.5037380238864836824167713635482801545086e-8@C@,
        -0.1483232144262638814568926925964858237006e-13@C@,
        0.1346609158752142460943888149156716841693e-14@C@,
        -0.660492688923978805315914918995410340796e-15@C@,
        0.1472114697343266749193617793755763792681e-15@C@,
        -0.1410901942033374651613542904678399264447e-16@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos17m64_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[16] = {
        23.56409085052261327114594781581930373708@C@,
        -88.92116338946308797946237246006238652361@C@,
        137.3472822086847596961177383569603988797@C@,
        -112.0400438263562152489272966461114852861@C@,
        51.98768915202973863076166956576777843805@C@,
        -13.78552090862799358221343319574970124948@C@,
        1.996371068830872830250406773917646121742@C@,
        -0.1423525874909934506274738563671862576161@C@,
        0.004098338646046865122459664947239111298524@C@,
        -0.3203286637326511000882086573060433529094e-4@C@,
        0.2641536751640138646146395939004587594407e-7@C@,
        -0.7777876663062235617693516558976641009819e-13@C@,
        0.7061443477097101636871806229515157914789e-14@C@,
        -0.3463537849537988455590834887691613484813e-14@C@,
        0.7719578215795234036320348283011129450595e-15@C@,
        -0.7398586479708476329563577384044188912075e-16@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos17m64_g@c@()
{
    return 12.2252227365970611572265625@C@;
}

/*
 *
 * Lanczos Coefficients for N=24 G=20.3209821879863739013671875
 * Max experimental error (with arbitary precision arithmetic) 1.0541e-38
 * Generated with compiler: Microsoft Visual C++ version 8.0 on Win32 at Mar 23 2006
 *
 */

/*
 *
 * Use for long-double precision, when evaluated as an long-double:
 *
 */
   
static @real@ lanczos24m113_sum@c@(@real@ z)
{
    static const @real@ num[24] = {
        2029889364934367661624137213253.22102954656825019111612712252027267955023987678816620961507@C@,
        2338599599286656537526273232565.2727349714338768161421882478417543004440597874814359063158@C@,
        1288527989493833400335117708406.3953711906175960449186720680201425446299360322830739180195@C@,
        451779745834728745064649902914.550539158066332484594436145043388809847364393288132164411521@C@,
        113141284461097964029239556815.291212318665536114012605167994061291631013303788706545334708@C@,
        21533689802794625866812941616.7509064680880468667055339259146063256555368135236149614592432@C@,
        3235510315314840089932120340.71494940111731241353655381919722177496659303550321056514776757@C@,
        393537392344185475704891959.081297108513472083749083165179784098220158201055270548272414314@C@,
        39418265082950435024868801.5005452240816902251477336582325944930252142622315101857742955673@C@,
        3290158764187118871697791.05850632319194734270969161036889516414516566453884272345518372696@C@,
        230677110449632078321772.618245845856640677845629174549731890660612368500786684333975350954@C@,
        13652233645509183190158.5916189185218250859402806777406323001463296297553612462737044693697@C@,
        683661466754325350495.216655026531202476397782296585200982429378069417193575896602446904762@C@,
        28967871782219334117.0122379171041074970463982134039409352925258212207710168851968215545064@C@,
        1036104088560167006.2022834098572346459442601718514554488352117620272232373622553429728555@C@,
        31128490785613152.8380102669349814751268126141105475287632676569913936040772990253369753962@C@,
        779327504127342.536207878988196814811198475410572992436243686674896894543126229424358472541@C@,
        16067543181294.643350688789124777020407337133926174150582333950666044399234540521336771876@C@,
        268161795520.300916569439413185778557212729611517883948634711190170998896514639936969855484@C@,
        3533216359.10528191668842486732408440112703691790824611391987708562111396961696753452085068@C@,
        35378979.5479656110614685178752543826919239614088343789329169535932709470588426584501652577@C@,
        253034.881362204346444503097491737872930637147096453940375713745904094735506180552724766444@C@,
        1151.61895453463992438325318456328526085882924197763140514450975619271382783957699017875304@C@,
        2.50662827463100050241576528481104515966515623051532908941425544355490413900497467936202516@C@
    };
    static const @real@ denom[24] = {
        0.0@C@,
        0.112400072777760768e22@C@,
        0.414847677933545472e22@C@,
        6756146673770930688000.0@C@,
        6548684852703068697600.0@C@,
        4280722865357147142912.0@C@,
        2021687376910682741568.0@C@,
        720308216440924653696.0@C@,
        199321978221066137360.0@C@,
        43714229649594412832.0@C@,
        7707401101297361068.0@C@,
        1103230881185949736.0@C@,
        129006659818331295.0@C@,
        12363045847086207.0@C@,
        971250460939913.0@C@,
        62382416421941.0@C@,
        3256091103430.0@C@,
        136717357942.0@C@,
        4546047198.0@C@,
        116896626.0@C@,
        2240315.0@C@,
        30107.0@C@,
        253.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 24);
}

   
static @real@ lanczos24m113_sum_expG_scaled@c@(@real@ z)
{
    static const @real@ num[24] = {
        3035162425359883494754.02878223286972654682199012688209026810841953293372712802258398358538@C@,
        3496756894406430103600.16057175075063458536101374170860226963245118484234495645518505519827@C@,
        1926652656689320888654.01954015145958293168365236755537645929361841917596501251362171653478@C@,
        675517066488272766316.083023742440619929434602223726894748181327187670231286180156444871912@C@,
        169172853104918752780.086262749564831660238912144573032141700464995906149421555926000038492@C@,
        32197935167225605785.6444116302160245528783954573163541751756353183343357329404208062043808@C@,
        4837849542714083249.37587447454818124327561966323276633775195138872820542242539845253171632@C@,
        588431038090493242.308438203986649553459461798968819276505178004064031201740043314534404158@C@,
        58939585141634058.6206417889192563007809470547755357240808035714047014324843817783741669733@C@,
        4919561837722192.82991866530802080996138070630296720420704876654726991998309206256077395868@C@,
        344916580244240.407442753122831512004021081677987651622305356145640394384006997569631719101@C@,
        20413302960687.8250598845969238472629322716685686993835561234733641729957841485003560103066@C@,
        1022234822943.78400752460970689311934727763870970686747383486600540378889311406851534545789@C@,
        43313787191.9821354846952908076307094286897439975815501673706144217246093900159173598852503@C@,
        1549219505.59667418528481770869280437577581951167003505825834192510436144666564648361001914@C@,
        46544421.1998761919380541579358096705925369145324466147390364674998568485110045455014967149@C@,
        1165278.06807504975090675074910052763026564833951579556132777702952882101173607903881127542@C@,
        24024.759267256769471083727721827405338569868270177779485912486668586611981795179894572115@C@,
        400.965008113421955824358063769761286758463521789765880962939528760888853281920872064838918@C@,
        5.28299015654478269617039029170846385138134929147421558771949982217659507918482272439717603@C@,
        0.0528999024412510102409256676599360516359062802002483877724963720047531347449011629466149805@C@,
        0.000378346710654740685454266569593414561162134092347356968516522170279688139165340746957511115@C@,
        0.172194142179211139195966608011235161516824700287310869949928393345257114743230967204370963e-5@C@,
        0.374799931707148855771381263542708435935402853962736029347951399323367765509988401336565436e-8@C@
    };
    static const @real@ denom[24] = {
        0.0@C@,
        0.112400072777760768e22@C@,
        0.414847677933545472e22@C@,
        6756146673770930688000.0@C@,
        6548684852703068697600.0@C@,
        4280722865357147142912.0@C@,
        2021687376910682741568.0@C@,
        720308216440924653696.0@C@,
        199321978221066137360.0@C@,
        43714229649594412832.0@C@,
        7707401101297361068.0@C@,
        1103230881185949736.0@C@,
        129006659818331295.0@C@,
        12363045847086207.0@C@,
        971250460939913.0@C@,
        62382416421941.0@C@,
        3256091103430.0@C@,
        136717357942.0@C@,
        4546047198.0@C@,
        116896626.0@C@,
        2240315.0@C@,
        30107.0@C@,
        253.0@C@,
        1.0@C@
    };
    return scf_evaluate_rational@c@(num, denom, z, 24);
}


static @real@ lanczos24m113_sum_near_1@c@(@real@ dz)
{
    static const @real@ d[23] = {
        7.4734083002469026177867421609938203388868806387315406134072298925733950040583068760685908@C@,
        -50.4225805042247530267317342133388132970816607563062253708655085754357843064134941138154171@C@,
        152.288200621747008570784082624444625293884063492396162110698238568311211546361189979357019@C@,
        -271.894959539150384169327513139846971255640842175739337449692360299099322742181325023644769@C@,
        319.240102980202312307047586791116902719088581839891008532114107693294261542869734803906793@C@,
        -259.493144143048088289689500935518073716201741349569864988870534417890269467336454358361499@C@,
        149.747518319689708813209645403067832020714660918583227716408482877303972685262557460145835@C@,
        -61.9261301009341333289187201425188698128684426428003249782448828881580630606817104372760037@C@,
        18.3077524177286961563937379403377462608113523887554047531153187277072451294845795496072365@C@,
        -3.82011322251948043097070160584761236869363471824695092089556195047949392738162970152230254@C@,
        0.549382685505691522516705902336780999493262538301283190963770663549981309645795228539620711@C@,
        -0.0524814679715180697633723771076668718265358076235229045603747927518423453658004287459638024@C@,
        0.00315392664003333528534120626687784812050217700942910879712808180705014754163256855643360698@C@,
        -0.000110098373127648510519799564665442121339511198561008748083409549601095293123407080388658329@C@,
        0.19809382866681658224945717689377373458866950897791116315219376038432014207446832310901893e-5@C@,
        -0.152278977408600291408265615203504153130482270424202400677280558181047344681214058227949755e-7@C@,
        0.364344768076106268872239259083188037615571711218395765792787047015406264051536972018235217e-10@C@,
        -0.148897510480440424971521542520683536298361220674662555578951242811522959610991621951203526e-13@C@,
        0.261199241161582662426512749820666625442516059622425213340053324061794752786482115387573582e-18@C@,
        -0.780072664167099103420998436901014795601783313858454665485256897090476089641613851903791529e-24@C@,
        0.303465867587106629530056603454807425512962762653755513440561256044986695349304176849392735e-24@C@,
        -0.615420597971283870342083342286977366161772327800327789325710571275345878439656918541092056e-25@C@,
        0.499641233843540749369110053005439398774706583601830828776209650445427083113181961630763702e-26@C@,
    };
    @real@ result = 0;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(k*dz + k*k);
    }
    return result;
}

static @real@ lanczos24m113_sum_near_2@c@(@real@ dz)
{
    static const @real@ d[23] = {
        61.4165001061101455341808888883960361969557848005400286332291451422461117307237198559485365@C@,
        -414.372973678657049667308134761613915623353625332248315105320470271523320700386200587519147@C@,
        1251.50505818554680171298972755376376836161706773644771875668053742215217922228357204561873@C@,
        -2234.43389421602399514176336175766511311493214354568097811220122848998413358085613880612158@C@,
        2623.51647746991904821899989145639147785427273427135380151752779100215839537090464785708684@C@,
        -2132.51572435428751962745870184529534443305617818870214348386131243463614597272260797772423@C@,
        1230.62572059218405766499842067263311220019173335523810725664442147670956427061920234820189@C@,
        -508.90919151163744999377586956023909888833335885805154492270846381061182696305011395981929@C@,
        150.453184562246579758706538566480316921938628645961177699894388251635886834047343195475395@C@,
        -31.3937061525822497422230490071156186113405446381476081565548185848237169870395131828731397@C@,
        4.51482916590287954234936829724231512565732528859217337795452389161322923867318809206313688@C@,
        -0.431292919341108177524462194102701868233551186625103849565527515201492276412231365776131952@C@,
        0.0259189820815586225636729971503340447445001375909094681698918294680345547092233915092128323@C@,
        -0.000904788882557558697594884691337532557729219389814315972435534723829065673966567231504429712@C@,
        0.162793589759218213439218473348810982422449144393340433592232065020562974405674317564164312e-4@C@,
        -0.125142926178202562426432039899709511761368233479483128438847484617555752948755923647214487e-6@C@,
        0.299418680048132583204152682950097239197934281178261879500770485862852229898797687301941982e-9@C@,
        -0.122364035267809278675627784883078206654408225276233049012165202996967011873995261617995421e-12@C@,
        0.21465364366598631597052073538883430194257709353929022544344097235100199405814005393447785e-17@C@,
        -0.641064035802907518396608051803921688237330857546406669209280666066685733941549058513986818e-23@C@,
        0.249388374622173329690271566855185869111237201309011956145463506483151054813346819490278951e-23@C@,
        -0.505752900177513489906064295001851463338022055787536494321532352380960774349054239257683149e-24@C@,
        0.410605371184590959139968810080063542546949719163227555918846829816144878123034347778284006e-25@C@,
    };
    @real@ result = 0;
    @real@ z = dz + 2;
    unsigned k;
    for (k = 1; k <= sizeof(d)/sizeof(d[0]); ++k)
    {
        result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
    }
    return result;
}

static @real@ lanczos24m113_g@c@()
{
    return 20.3209821879863739013671875@C@;
}

/**end repeat**/

#endif

/*
 * Local Variables:
 * mode:c
 * End:
 */
