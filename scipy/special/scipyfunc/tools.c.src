/*
 *     (C) Copyright John Maddock 2006.
 *     Use, modification and distribution are subject to the
 *     Boost Software License, Version 1.0. (See accompanying file
 *     LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 *     ---
 *
 *     Boost Software License - Version 1.0 - August 17th, 2003
 * 
 *     Permission is hereby granted, free of charge, to any person or
 *     organization obtaining a copy of the software and accompanying
 *     documentation covered by this license (the "Software") to use, reproduce,
 *     display, distribute, execute, and transmit the Software, and to prepare
 *     derivative works of the Software, and to permit third-parties to whom the
 *     Software is furnished to do so, all subject to the following:
 *     
 *     The copyright notices in the Software and this entire statement,
 *     including the above license grant, this restriction and the following
 *     disclaimer, must be included in all copies of the Software, in whole or
 *     in part, and all derivative works of the Software, unless such copies or
 *     derivative works are solely in the form of machine-executable object code
 *     generated by a source language processor.
 *     
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 *     NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 *     DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *     SOFTWARE.
 *
 */

#include "scipyfunc.h"

/**begin repeat
 * #real = float,double,npy_longdouble#
 * #c = f,,l#
 * #C = F,,L#
 */

/*
 * Evaluate polynomial, with coefficients given in order
 *
 *   c[0] + x*c[1] + x**2 * c[2] + ...
 *
 */
@real@ scf_evaluate_polynomial@c@(const @real@ *c, @real@ z, int count)
{
    @real@ r;
    int i;

    if (count <= 0) {
        return 0;
    }
    r = c[count-1];
    for (i = count - 2; i >= 0; --i) {
        r *= z;
        r += c[i];
    }
    return r;
}

/*
 * Evaluate polynomial, with coefficients given in reverse order
 *
 *   c[count-1] + x*c[count-2] + x**2 * c[count-3] + ...
 *
 */
@real@ scf_evaluate_polynomial_rev@c@(const @real@ *c, @real@ z, int count)
{
    @real@ r;
    int i;

    if (count <= 0) {
        return 0;
    }
    r = c[0];
    for (i = 1; i < count; ++i) {
        r *= z;
        r += c[i];
    }
    return r;
}

/*
 * Evaluate rational function, with coefficients
 *
 *   (num[0] + x*num[1] + x**2 * num[2] + ... )
 *   / (denom[0] + x*denom[1] + x**2 * denom[2] + ... ) 
 *
 */
@real@ scf_evaluate_rational@c@(const @real@ *num, const @real@ *denom,
                                @real@ z, int count)
{
    @real@ s1, s2;
    int i;
    if (z <= 1) {
        s1 = num[count-1];
        s2 = denom[count-1];
        for (i = count - 2; i >= 0; --i) {
            s1 *= z;
            s2 *= z;
            s1 += num[i];
            s2 += denom[i];
        }
    } else {
        z = 1/z;
        s1 = num[0];
        s2 = denom[0];
        for (i = 1; i < count; ++i) {
            s1 *= z;
            s2 *= z;
            s1 += num[i];
            s2 += denom[i];
        }
    }
    return s1 / s2;
}

/**end repeat**/

/*
 * Local Variables:
 * mode:c
 * End:
 */
